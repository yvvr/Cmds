###### Git commands ######

## Git Modification ##

1. git init
2. git config --list
3. git config --global user.name <username>
4. git config --global user.email <user's email>
5. git status
6. git add .
7. git add <filename> (# git add = git commit -a)

8. git commit -m <message>
9. git commit -am <message> (# commiting directly from working directory without adding files)
10. git commit --amend -m <message> (# Changing message of last commit without recommiting.)
11. git commit --amend (# Adding files to last commit without recommiting.)

12. git diff <filename>
13. git diff --staged <filename> (# To do diff in staging area of repository)

## Git Reverting Files ##

1. git checkout -- <filename> (# To discard changes in Working directory)
2. git checkout <Hash Log> -- <FileName> (# To discard changes in particular file from Last Commit(Local Repository -> Staging area)) 
3. git restore --staged <filename>
4. git restore <filename> (# To discard changes in working directory)

5. git rm <filename> (# removes file from Working Directory)
5.1. git rm --cached <filename> (# removes file from Staging area.)

6. git revert <Hash Log> (# To revert given commit, its creates new commit rather than reset.)
7. git revert HEAD (# To revert last commit, its creates new commit rather than reset.)

8. git reset Head <filename> (# To unstage the file (Staging area -> Working directory))
9. git reset --soft <commit_hash> (# To discard the commit (Local Repository -> Staging area))
10. git reset <commit_hash> (# To discard changes of the commit (Local Repository -> Working directory))
11. git reset --hard <commit_hash> (# To discard changes of the commit for ever (Local Repository -> Initial state.))
12. git reset --hard <commit hash> <filename> (# To discard changes of particular file in commit for ever (Local Repository -> Initial state.))

## Git Rename Files ##

1. git add <new file name> , git rm <old file name> (# two steps to rename file.)
2. git mv <old file name> <new file name> (# Moving from one file to another itself is renaming.)

## Git Remote Setup ##

1. git remote add $<variable> <git repo link> (# variable name can be anything, but convenient term is "origin")
2. git remote
3. git remote -v (# gives remote repository details)
3. git push -u $<remote variable> <branch name>
4. git clone -b <branch> <remote_repo>
5. git pull
6. git pull origin <branch>
7. git push
8. git push -u origin <branch> (# pushes changes to particular branch.)
9. git remote set-url origin git@github.com:User/UserRepo.git (# It resets origin to new URL)

## Clone from branch ##

1. git clone <repository_url> (# Clone the repository)

## Branches ##

1. git branch -a (# List all branches)
2. git branch <name_of_branch> (# Creates a new branch)

## Checkout the branch that you want

1. git checkout <name_of_branch>
2. git checkout -f <branch-name>
3. git checkout -b <branch-name> --force

or 

17. git clone -b <branch> <remote_repo>

or 

mkdir $BRANCH
cd $BRANCH
git init
git remote add -t $BRANCH -f origin $REMOTE_REPO
git checkout $BRANCH

## Delete Branch ##

1. git branch -d <name_of_branch> (# Deletes branch only if changes are merged.)
2. git branch -D <name_of_branch> (# Deletes branch even if there are unmerged changes.)
3. git branch --delete <branch> (# Deletes local branch, works same as -d)
4. git push <remote_name> --delete <branch_name> (# Deletes a Remote Branch, Git 1.7)
5. git push -d <remote_name> <branch_name> (# Deletes a Remote Branch, shorter ver of --delete, Git 2.8)

## Git log ##

1. git log
2. git log --author="<your name>"
3. git log --oneline
4. git log --stat
5. git reflog (# It lists all commits in order of last reference.)

## Git Cherry-pick ##

1. git cherry-pick <commit_hash> (# Pull commit from other branch to current branch.)


## Locally & Globally set and get commands ##

You need to use the local set command below:

##local set

git config user.email mahmoud@company.ccc
git config user.name 'Mahmoud Zalt'

##local get

git config --get user.email
git config --get user.name

The local config file is in the project directory: .git/config.

## global set

git config --global user.email mahmoud@zalt.me
git config --global user.name 'Mahmoud Zalt'

## global get

git config --global --get user.email
git config --global --get user.name


## delete any credentials from git bash ##

1. git credential-manager delete <url>

2. git credential-manager delete https://github.com

## Git Ignore ##

.gitignore (#list files & Folders to ignore)

## Git Save Temporary data ##

1.1. git stash save
1.2. git checkout branch

// do something

1.3. git checkout oldbranch
1.4. git stash pop

2. git stash list (# lists all changes saved in stash.)
3. git stash show (# shows all changes saved in stash.)


## Git Clean ##

1. git clean -df (# d for get rid of untracked directories & f for files.)

## Git ignore tracked changes ##

1. git update-index --assume-unchanged <file> (#Git ignore tracked file changes, as .gitignore don't work in this case.)

2. git update-index --no-assume-unchanged <file> (#Git unignore already ignored changes.)

3. git update-index --skip-worktree <file>

4. git update-index --no-skip-worktree <file>

## other solution for ignore tracked files

git stash

git whatever-else

git stash apply

git stash clear

https://stackoverflow.com/questions/278192/view-the-change-history-of-a-file-using-git-versioning

## Advance cmds

1. git commit --amend -m "<message>" (Modifies message of recent commit.)

2. git reflog (shows commits in order of reference.)

## git patch

1. git format-patch <applied_brach> -o <folder_name> (create patch for applied branch with new folder name.) # It creates multiple patches for each commit.

2. git format-patch -1 <commit_hash> -o <folder_name> (create patch only for particular commit.)

3. git am <folder_name/*.patch> (Apply patch in applied brach.)